// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id           String         @id @default(uuid())
  username     String         @unique
  email        String         @unique
  password     String
  IsBanned     Boolean        @default(false)
  SessionToken SessionToken[]

  FriendA Friends[] @relation("friendA")
  FriendB Friends[] @relation("friendB")

  FriendRequest    FriendRequest[] @relation("FromRequest")
  MyFriendRequests FriendRequest[] @relation("MyFriendRequests")

  MyGroups   Group[]   @relation("groups")
  MyMessages Message[] @relation("messageOwner")

  directMessageA DirectMessageChannel[] @relation("directMessageA")
  directMessageB DirectMessageChannel[] @relation("directMessageB")

  GroupMemberProperties GroupMemberProperties[]
}

model Friends {
  friendA         User   @relation("friendA", fields: [friendAUsername], references: [username])
  friendAUsername String

  friendB         User   @relation("friendB", fields: [friendBUsername], references: [username])
  friendBUsername String

  @@id([friendAUsername, friendBUsername])
}

model SessionToken {
  owner   User   @relation(fields: [ownerID], references: [id])
  ownerID String @id
  token   String @unique
}

model FriendRequest {
  id String @id @default(uuid())

  from   User   @relation("MyFriendRequests", fields: [fromID], references: [username])
  fromID String

  to   User   @relation("FromRequest", fields: [toID], references: [username])
  toID String
}

model GroupMemberProperties {
  Group   Group  @relation(fields: [groupID], references: [id])
  groupID String

  User   User   @relation(fields: [userID], references: [id])
  userID String

  permissionString String   @default("member")
  isBanned         Boolean  @default(false)
  joinedAt         DateTime @default(now())

  @@unique([groupID, userID])
}

model Group {
  id    String @id @default(uuid())
  name  String @unique
  users User[] @relation("groups")

  Channels Channel[] @relation("channels")

  GroupMemberProperties GroupMemberProperties[]
}

model DirectMessageChannel {
  id String @id @default(uuid())

  userA         User   @relation("directMessageA", fields: [userAUsername], references: [username])
  userAUsername String

  userB         User   @relation("directMessageB", fields: [userBUsername], references: [username])
  userBUsername String
}

model Channel {
  id          String @id @default(uuid())
  channelName String @unique
  Group       Group  @relation("channels", fields: [groupID], references: [id])
  groupID     String

  Messages Message[] @relation("messages")
}

model Message {
  id      String @id @default(uuid())
  content String

  Channel   Channel @relation("messages", fields: [channelID], references: [id])
  channelID String

  Owner         User   @relation("messageOwner", fields: [ownerUsername], references: [username])
  ownerUsername String

  date DateTime @default(now())
}
